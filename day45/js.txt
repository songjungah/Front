HTML : 하이퍼텍스트 마크업 언어 = 뼈대
CSS : 캐스팅 스타일 시트 = 옷
JS : 자바스크립트 = 행동/동작

[JS] : JavaScript
    - 2009년 이후 node.js 나오면서 백엔드 역활도 가능해졌다.
    1. 웹 클라이언트(HTML, CSS, JS)
    2. 웹 서버 (node.js)
    3. 모바일 (react.js native)
    4. 소프트웨어 (NW.js)

[JS 사용하는 방법]
    1. HTML 파일 내 <body> 마크업 안에서 <script> 마크업 사용
        <body>
            <script>
                JS코드작성
            </script>
        </body>

    ★2-1. JS 파일(.js) 생성하여 <head> 마크업에서 js파일 불러온다.
        <head>
            <script src="js 파일경로"></script>
        </head>
    2-2. html 모두 렌더링(생성) 후에 js 실행


[데이터란?]
    - 데이터란? 한국어로는 자료, 컴퓨터 언어가 이해하는 자료들, 리터럴
    1. 숫자 : 10, 3.14, 537
    2. 문자 : '안녕', "안녕", `안녕`
    3. 논리 : true, false

[타입/자료형/분류]
    - 데이터들을 특정한 기준으로 분류한 것
    숫자타입 : Number   (ex) 10, 3.14, 53717
    문자타입 : String   (ex) '작은따옴표' 또는 "큰따옴표" 또는 `백틱`으로 감싼 자료
    논리타입 : Boolean  (ex) true, false

[JS 출력함수]
    1. console.log( ) : 브라우저의 F12(개발자 도구) 메뉴 [console]탭에서 출력하는 함수

[JS 입력함수]
    1. prompt() : 브라우저에서 알림 메세지와 입력(input) 기능 제공하는 함수
        - 함수 1개당 입력창 1개
        - 입력받은 값을 문자타입으로 반환
        1. 문자타입 -> 숫자타입으로 입력받기 : Number(pronpt());

[이스케이프/제어 문자]
    1. \n : 줄바꿈
    2. \t : 들여쓰기
    3. \\ : \한개 출력
    4. \' : '한개 출력
    5. \" : "한개 출력

[변수와 상수]
    - 공통 
        1. 데이터 ★1개를 저장할 수 있는 메모리 공간
        2. 메모리 공간의 상징적인 이름이 존재한다. 변수명, 상수명
        3. 자바(JAVA)와 다르게 변수타입이 자동으로 관리하기 때문에 타입 병시할 필요가 없다.
            - let/const 로 선언 후 모든 자료를 저장 할 수 있다.
    
    1. 변수 : 변하지 않는 수/값
        1. 변수 선언 : let 키워드
            let 변수명;
            => 값이 없는 변수 호출시 undefined

        2. 변수 값 초기화 : 변수 선언시 처음에 값 대입 행위
            let 변수명 = 초기값;

        3. 변수 값 호출 : 변수명을 작성하면 변수가 갖는 값이 반환된다.
            변수명

        4. 변수 값 수정 : 기존 변수명을 호출해서 새로운 값 대입
            변수명 = 새로운 값

        5. 변수 연산
            변수명A + 데이터 + 변수명B

    2. 상수 : 변하지 않는 수/값
        1. 상수 선언 : const 키워드
            const 상수명 = 초기값;      * 상수는 무조건 초기값을 넣어야한다.

        2. 상수 값 호출
            상수명

        3. 상수 값 수정[X] : 상수는 수정이 불가능하다.
            - Assignment to constant variable. 오류발생

        4. 상수 연산
            상수명A + 데이터 + 상수명B


[연산자]
    - 연산(계산) 결과를 *하나*로 도출하는 과정
    - 연산(계산)에 사용되는 기호/특수문자, 생성자
    - 종류
        1. 산술연산자       : +, -, *, /, %
        2. 연결연산자       : + 앞뒤에 문자가 존재하면 덧셈이 아닌 연결을 한다.
        3. 비교연산자       : > 초과 < 미만 <= 이하 == (값)같다 != (값)다르다 ===(타입과 값)같다
        4. 관계연산자
            - && : 이면서, 이고, 모두, 그리고
                true && true => true, true && false => false
            - || : 이거나, 거나, 또는, 하나라도
                true || true => true, true || false => true
            - ! : 부정, 반대, true -> false, false -> true
                !true => false, !false => true
        5. 복합대입연산자
            = 오른쪽 항(값) 를 왼쪽 항(변수)에 대입한다.
            += 오른쪽 항(값)를 왼쪽 항값과 더한 후에 왼쪽 항(변수)에 대입한다.
            -=, *=, /=, %=
        6. 증감연산자 : 변수명 앞 뒤에 ++ 또는 -- 입력하여 변수의 1 증가 또는 감소, 빠른 연산
            ++변수명 : 선위 증가            --변수명 : 선위 감소
            변수명++ : 후위 증가            변수명-- : 후위 감소
            ★주의할 점1 : 특정 변수에 1 증가하는 코드 작성하시오.
                let value = 10;
                - 방법1 : value = value + 1;
                - 방법2 : value += 1;
                - 방법3 : value++;

            ★주의할 점2 : (세미클론) 명령단위 기준으로 우선순위를 정한다.
                ++value;    VS  value++;   > 결과는 같다
                console.log(++value);   VS      console.log(value--);   > 결과는 다르다
        7. 삼항연산자 : 항이 3개라서 삼항연산자라고 한다.
            - 첫번째 항 : 조건을 넣는다, 두번째 항 : true 일 때 코드, 세번째 항 : false 일 때 코드
            - 조건? 참 : 거짓
            - (중첩) 조건1? 참1 : 조건2 ? 참2 : 거짓
                - 주로 간단한/짧은 논리조건은 삼항연산자 사용, 복잡한 조건은 IF 문을 사용한다.
                - react.js 의 조건부 렌더링 에서 주로 사용된다.


        - parseInt(나누기) : 몫


[배열]
    1. 순서대로 번호가 붙인 원소들이 연속적인 형태로 구성된 데이터 타입
    2. 인텍스? 순서대로 배정된 번호 : 0번 시작, 길이/총개수 : 3이면 인덱스 0,1,2
    3. 배열선언
        - 1. [] : 대괄호
        - 2. [] 안에서 요소들을, (쉼표)를 이용한 요소 구분하여 열거한다.
        let 변수명 = [값1, 값2, 값3]

    4. 배열의 전체 요소 호출
        배열 변수명

    5. 배열의 특정 요소 호출
        배열변수명[인덱스]

    6. 배열 수정
        1. 배열변수를 전체 수정
            배열변수명 = [새로운 배열]
        2. 배열변수의 특정한 요소 값 수정
            배열변수명[인덱스] = 새로운 값

    7. 배열내 요소(값) 추가
        배열변수명.push(새로운 값);                     : 맨 뒤에 새로운 요소 추가
        배열변수명.splice(삽입인덱스, 0, 새로운 값);     : 삽입 인덱스의 새로운 요소 추가

    8. 배열내 요소(값) 삭제
        배열변수명.splice(삭제인덱스, 삭제개수);         : 삭제 인덱스부터 개수만큼 요소 삭제

    9. 배열 내 요소(값) 찾기
        배열변수명.indexOf(찾을 값);              : 배열내 찾을 값이 존재하면 찾은 인덱스 반환, 없으면 -1
        배열변수명.includes(찾을 값);             : 배열 내 찾을 값이 존재하면 true, 없으면 false 반환


[문자열]
    1. "큰따옴표 / '작은따옴표 / `백틱 으로 감싼 데이터
    2. 이스케이프/제어 문자
        \n : 줄바꿈
        \t : 들여쓰기
        \\ : \한개 출력
        \' : '한개 출력
        \" : "한개 출력
    3. `백틱 템플릿
        1. 문자열 사이에 ${} 표현식을 이용한 연산식을 연결할 수 있다.
        2. `문자열A ${연산식} 문자열B ${연산식} 문자열C 문자열D`
        3. HTML 과 JS 가 같이 사용될 떄 주로 사용됨. REACT(HTML + JS => 한파일)
            - HT(TEXT)ML 은 문자타입만 가능한 언어
            - JS은 다양한 타입이 존재한 언어


[DOM 객체]
    document 객체 
    1. 내장함수
        document.querySelector('선택자') : 선택자의 마크업을 JS객체로 반환하는 함수
            - query(질의-요청할게)
            - selector(선택자)
            -> 선택자를 요청한다
            [ 선택자 ] : css 선택자 동일, 1. 마크업명 2. .클래스명 3. #아이디명
            (ex) document.querySelector('ol'); : html의 ol마크업을 JS 객체로 요청한다.
    
    2. 내장 속성/필드/멤버변수
    .innerHTML = `html 코드`            : 현재 마크업 사이에 html 문자열을 대입/호출 할 수 있다.
        - inner(내부 - 현재 마크업 content)
        - HTML (HTML 언어)


[조건문]
    1. true 와 false 에 따른 흐름 제어, 컴퓨터가 논리/비교(상황에 따른 판단)적인 사교력
    2. 조건찾기
        (ex) 내가 돈이 10000원이 있으면 택시를 타고 아니면 걸어가야겠다.
             조건 : 돈 >= 10000         참 : 택시를 탄다 / 거짓 : 걸어간다
        (ex) 밖에 비가 오면 우산을 챙겨간다 아니면 그냥간다.
             조건 : 날씨 == 비          참 : 우산챙겨 / 거짓 : 걸어간다.
        (ex) 내가 입력한 아이디와 비밀번호가 회원가입 했을 때 와 일치하면 로그인 성공 아니면 실패
             조건 : 입력한 아이디 == 기존 아이디 && 입력한 비밀번호 == 기존 비밀번호
             참 : 로그인 성공 / 거짓 : 로그인 실패
        (ex) 버스 타서 버스카드를 찍는데 1500원 이상이면 '탑승하세요' 아니면 '잔액부족' 
    3. 조건문 문법
        (1) if(조건) 참일경우 코드;
        (2) if(조건) {참일경우 코드; 참일경우 코드;}
        (3) if(조건) {참일경우 코드;}
            else {거짓일경우 코드;}
        (4) if(조건1) {참일경우 코드;}
            else if(조건2) {참2일경우 코드;}
            else{거짓일경우 코드;}
        (5) if(조건) {
                if(조건) {
                    중첩가능!
                }
        }
    4. 가장 먼저 if 작성시 생각 연습
        - 1. 한글로 문제 또는 생각 에서 논리/조건 찾기
        - 2. 각 논리에 따른 결과를 어떻게 나눠서/분류 (흐름제어) 할지 판단